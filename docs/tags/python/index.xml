<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Python on RakuBlog</title>
    <link>https://rakuichi4817.github.io/tags/python/</link>
    <description>Recent content in Python on RakuBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2019 -2023, Rakuichi - All Rights Reserved</copyright>
    <lastBuildDate>Wed, 12 Apr 2023 23:30:00 +0000</lastBuildDate>
    
        <atom:link href="https://rakuichi4817.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Pipenv、Docker（マルチステージビルド）、devcontainerで開発環境と本番環境を分ける</title>
        <link>https://rakuichi4817.github.io/posts/pipenv-docker/</link>
        <pubDate>Wed, 12 Apr 2023 23:30:00 +0000</pubDate>
        
        <atom:modified>Wed, 12 Apr 2023 23:30:00 +0000</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/pipenv-docker/</guid>
        <description>久しぶりの投稿です（n回目）。 最近、Pythonで環境を作るときにDockerで環境を作るようにしており、そこで利用している設定についてメモ</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/images/cover/top-cover.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>Pipenv</category>
            
          
            
              <category>Streamlit</category>
            
          
            
              <category>Docker</category>
            
          
            
              <category>環境構築</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
              <category>Python環境構築</category>
            
          
            
              <category>アプリ開発</category>
            
          
        
      </item>
      
      <item>
        <title>FastAPI×MKDocs（×GitHub Pages）でドキュメント生成</title>
        <link>https://rakuichi4817.github.io/posts/poms-02/</link>
        <pubDate>Tue, 21 Feb 2023 00:45:00 +0900</pubDate>
        
        <atom:modified>Tue, 21 Feb 2023 00:45:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/poms-02/</guid>
        <description>以前投稿した記事「FastAPI×Streamlitでアプリ開発（Getリクエスト）」で、FastAPIとStreamlitを利用し、Pyt</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/posts/poms-02/poms-documents.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>FastAPI</category>
            
          
            
              <category>MKDocs</category>
            
          
            
              <category>GitHub</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
              <category>アプリ開発</category>
            
          
        
      </item>
      
      <item>
        <title>FastAPI×Streamlitでアプリ開発（Getリクエスト）</title>
        <link>https://rakuichi4817.github.io/posts/poms-01/</link>
        <pubDate>Fri, 07 Oct 2022 18:00:00 +0900</pubDate>
        
        <atom:modified>Fri, 07 Oct 2022 18:00:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/poms-01/</guid>
        <description>PythonでAPIを作成するときに使われるFastAPIですが、やはりアプリにしたいというところで、フロントエンドの部分を作るのに困ってい</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/posts/poms-01/app-01.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>FastAPI</category>
            
          
            
              <category>Pydantic</category>
            
          
            
              <category>Streamlit</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
              <category>アプリ開発</category>
            
          
        
      </item>
      
      <item>
        <title>Pydanticで定義したクエリパラメータをFastAPIのドキュメントに反映する</title>
        <link>https://rakuichi4817.github.io/posts/fastapi-tips-01/</link>
        <pubDate>Wed, 05 Oct 2022 20:20:00 +0900</pubDate>
        
        <atom:modified>Wed, 05 Oct 2022 20:20:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/fastapi-tips-01/</guid>
        <description>タイトルの通り、FastAPIで自動生成されるOpenAPIドキュメント（Swagger）内で、Pydanticで定義したクラスをDepen</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/images/cover/python-cover.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>FastAPI</category>
            
          
            
              <category>Pydantic</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
      </item>
      
      <item>
        <title>GitHub Actions・pytestで失敗した(Failed)時の挙動確認</title>
        <link>https://rakuichi4817.github.io/posts/github-actions-pytest-failed/</link>
        <pubDate>Tue, 18 Jan 2022 01:00:00 +0900</pubDate>
        
        <atom:modified>Tue, 18 Jan 2022 01:00:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/github-actions-pytest-failed/</guid>
        <description>&lt;p&gt;タイトルの通り、GitHub Actionsでpytestを実行し、テストが失敗（Failed）したときの挙動について確認してみました。&lt;/p&gt;
&lt;p&gt;前回の記事「&lt;a href=&#34;https://rakuichi4817.github.io/posts/github-actions-pytest/&#34;&gt;GitHub Actions・pipenv・pytestで自動テストの練習&lt;/a&gt;」で、一連の流れの確認をしてみたのですが、テストが失敗のときはどうやって判断できるのだろうか？と思い、実際に試し、そのまとめになります（当たり前のことなのかもしれませんが、勉強なのであしからず）。&lt;/p&gt;</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/images/cover/python-cover.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>pytest</category>
            
          
            
              <category>GitHub</category>
            
          
            
              <category>GitHub Actions</category>
            
          
            
              <category>テスト</category>
            
          
            
              <category>CI/CD</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
              <category>テスト駆動開発</category>
            
          
        
      </item>
      
      <item>
        <title>GitHub Actions・pipenv・pytestで自動テストの練習</title>
        <link>https://rakuichi4817.github.io/posts/github-actions-pytest/</link>
        <pubDate>Thu, 06 Jan 2022 19:20:00 +0900</pubDate>
        
        <atom:modified>Thu, 06 Jan 2022 19:20:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/github-actions-pytest/</guid>
        <description>&lt;p&gt;タイトルの通り、GitHub Actionsを用いてPythonのテスト自動化に取り組んでみました。テストについては、もちろんpytestを利用するのですが、今回はpythonパッケージの依存関係をpipenvで管理している場合を想定します。練習なので、最低限動作するレベルの内容であり、ベストプラクティスというわけではないのでご注意ください。&lt;/p&gt;
&lt;p&gt;GitHub Actionsのワークフロー定義のみ見たいという方は「&lt;a href=&#34;#3-github-actions%E3%81%AE%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90&#34;&gt;#3-github-actionsのワークフローファイルの作成&lt;/a&gt;」をクリックしてください。&lt;/p&gt;</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/images/cover/python-cover.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>pytest</category>
            
          
            
              <category>GitHub</category>
            
          
            
              <category>GitHub Actions</category>
            
          
            
              <category>テスト</category>
            
          
            
              <category>CI/CD</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
              <category>テスト駆動開発</category>
            
          
        
      </item>
      
      <item>
        <title>脱AnacondaしてPipenvでPython環境作り</title>
        <link>https://rakuichi4817.github.io/posts/start-pipenv/</link>
        <pubDate>Sun, 26 Sep 2021 18:00:00 +0900</pubDate>
        
        <atom:modified>Sun, 26 Sep 2021 18:00:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/start-pipenv/</guid>
        <description>&lt;p&gt;大学4年からPythonを触りだしましたが、その時から一貫してAnacondaでPythonの環境を作成していました。しかし、脱AnacondaしてPipenvに乗り換えたので、簡単にまとめようかと思います。&lt;/p&gt;</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        <media:content url="https://rakuichi4817.github.io/images/cover/python-cover.png" medium="image"><media:title type="html">meta image</media:title></media:content>
        
          
            
              <category>Python</category>
            
          
            
              <category>環境構築</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
              <category>Python環境構築</category>
            
          
        
      </item>
      
      <item>
        <title>Windows(CPU)にAnacondaでTensorFlow2.1.0とKeras2.3.1の導入</title>
        <link>https://rakuichi4817.github.io/posts/windows-cpu-keras/</link>
        <pubDate>Mon, 13 Apr 2020 23:00:00 +0900</pubDate>
        
        <atom:modified>Mon, 13 Apr 2020 23:00:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/windows-cpu-keras/</guid>
        <description>&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34; data-dir=&#34;ltr&#34;&gt;&lt;strong&gt;【2021年9月18日追記】&lt;/strong&gt;&lt;br /&gt;
本記事ではcondaを用いて仮想環境を作成し、その内部でpipを使ってライブラリをインストールしています。しかし、2021年途中以降で脱Anacondaをしましたので、こちらの方法がおすすめというわけでもありません。&lt;/div&gt;
&lt;p&gt;こんばんは、4月から始まった会社の研修も、Zoomによるリモート研修になってしまい、一日中パソコンとにらめっこしているRakuichiです。&lt;/p&gt;</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Python</category>
            
          
            
              <category>AI・ML</category>
            
          
            
              <category>環境構築</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
      </item>
      
      <item>
        <title>Pythonで分かち書きされたテキストに対する単語出現回数をカウント</title>
        <link>https://rakuichi4817.github.io/posts/term-count/</link>
        <pubDate>Sun, 27 Oct 2019 12:00:00 +0900</pubDate>
        
        <atom:modified>Sun, 27 Oct 2019 12:00:00 +0900</atom:modified>
        <guid>https://rakuichi4817.github.io/posts/term-count/</guid>
        <description>&lt;p&gt;Scikit-learnなどの外部パッケージを使わずに文書中の単語の出現回数を求めたいときのプログラムです。&lt;/p&gt;</description>
        
        <dc:creator>Rakuichi</dc:creator>
        <media:content url="https://rakuichi4817.github.io/images/tech/python.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Python</category>
            
          
            
              <category>NLP</category>
            
          
        
        
          
            
              <category>技術系備忘録</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>
